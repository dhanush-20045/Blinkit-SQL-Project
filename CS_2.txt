create Database casestudy2;
USE casestudy2;

CREATE TABLE LOCATION (
  Location_ID INT PRIMARY KEY,
  City VARCHAR(50)
);

INSERT INTO LOCATION (Location_ID, City)
VALUES (122, 'New York'),
       (123, 'Dallas'),
       (124, 'Chicago'),
       (167, 'Boston');


  CREATE TABLE DEPARTMENT (
  Department_Id INT PRIMARY KEY,
  Name VARCHAR(50),
  Location_Id INT,
  FOREIGN KEY (Location_Id) REFERENCES LOCATION(Location_ID)
);


INSERT INTO DEPARTMENT (Department_Id, Name, Location_Id)
VALUES (10, 'Accounting', 122),
       (20, 'Sales', 124),
       (30, 'Research', 123),
       (40, 'Operations', 167);

CREATE TABLE JOB
(JOB_ID INT PRIMARY KEY,
DESIGNATION VARCHAR(20))

INSERT  INTO JOB VALUES
(667, 'CLERK'),
(668,'STAFF'),
(669,'ANALYST'),
(670,'SALES_PERSON'),
(671,'MANAGER'),
(672, 'PRESIDENT')


CREATE TABLE EMPLOYEE
(EMPLOYEE_ID INT,
LAST_NAME VARCHAR(20),
FIRST_NAME VARCHAR(20),
MIDDLE_NAME CHAR(1),
JOB_ID INT FOREIGN KEY
REFERENCES JOB(JOB_ID),
MANAGER_ID INT,
HIRE_DATE DATE,
SALARY INT,
COMM INT,
DEPARTMENT_ID  INT FOREIGN KEY
REFERENCES DEPARTMENT(DEPARTMENT_ID))

INSERT INTO EMPLOYEE VALUES
(7369,'SMITH','JOHN','Q',667,7902,'17-DEC-84',800,NULL,20),
(7499,'ALLEN','KEVIN','J',670,7698,'20-FEB-84',1600,300,30),
(7505,'DOYLE','JEAN','K',671,7839,'04-APR-85',2850,NULl,30),
(7506,'DENNIS','LYNN','S',671,7839,'15-MAY-85',2750,NULL,30),
(7507,'BAKER','LESLIE','D',671,7839,'10-JUN-85',2200,NULL,40),
(7521,'WARK','CYNTHIA','D',670,7698,'22-FEB-85',1250,500,30)

--simple queries
---Task1
select * from EMPLOYEE
---TASK2
SELECT * FROM DEPARTMENT
--TASK3
SELECT *FROM JOB
---TASK4
SELECT *FROM LOCATION
--TASK5
SELECT FIRST_NAME,LAST_NAME,SALARY,COMM FROM EMPLOYEE
---TASK6
SELECT 
    EMPLOYEE_ID AS "ID of the Employee", 
    LAST_NAME AS "Name of the Employee", 
    DEPARTMENT_ID AS "Dep_id" 
FROM EMPLOYEE;
--TASK7
SELECT FIRST_NAME,LAST_NAME, SALARY * 12 AS annual_salary FROM EMPLOYEE;
--WHERE CONDITION
--TASK1
SELECT * FROM EMPLOYEE WHERE LAST_NAME = 'Smith';
--TASK2
SELECT * FROM EMPLOYEE WHERE DEPARTMENT_ID = 20;
--TASK3
SELECT * FROM EMPLOYEE WHERE SALARY BETWEEN 2000 AND 3000;
--TASK4
SELECT * FROM EMPLOYEE WHERE DEPARTMENT_ID IN (10, 20);
--TASK5
SELECT * FROM EMPLOYEE WHERE DEPARTMENT_ID NOT IN (10, 30);
--TASK6
SELECT * FROM EMPLOYEE WHERE FIRST_NAME LIKE 'L%';
--TASK7
SELECT * FROM EMPLOYEE WHERE FIRST_NAME LIKE 'L%E';
--TASK8
SELECT * FROM EMPLOYEE WHERE FIRST_NAME LIKE 'J___';
--TASK9
SELECT * FROM EMPLOYEE WHERE DEPARTMENT_ID = 30 AND SALARY > 2500;
--TASK10
SELECT * FROM EMPLOYEE WHERE COMM IS NULL OR COMM = 0;
--ODERBYCLAUSE
--TASK1
SELECT EMPLOYEE_ID, LAST_NAME FROM EMPLOYEE ORDER BY EMPLOYEE_ID ASC;
--TASK2
SELECT EMPLOYEE_ID, CONCAT(FIRST_NAME, ' ', LAST_NAME) AS FULL_NAME 
FROM EMPLOYEE
ORDER BY SALARY DESC;
--TASK3
SELECT * FROM EMPLOYEE ORDER BY LAST_NAME ASC;
--TASK4
SELECT * FROM EMPLOYEE ORDER BY LAST_NAME ASC, DEPARTMENT_ID DESC;
--GROUP BY and HAVING Clause:
--TASK1
SELECT 
    DEPARTMENT_ID, 
    MAX(SALARY) AS MAX_SALARY, 
    MIN(SALARY) AS MIN_SALARY, 
    AVG(SALARY) AS AVG_SALARY 
FROM EMPLOYEE 
GROUP BY DEPARTMENT_ID;
--TASK2
SELECT 
    JOB_ID, 
    MAX(SALARY) AS MAX_SALARY, 
    MIN(SALARY) AS MIN_SALARY, 
    AVG(SALARY) AS AVG_SALARY 
FROM EMPLOYEE 
GROUP BY JOB_ID;
--TASK3
SELECT 
    MONTH(HIRE_DATE) AS MONTH, 
    COUNT(*) AS EMPLOYEE_COUNT 
FROM EMPLOYEE 
GROUP BY MONTH(HIRE_DATE) 
ORDER BY MONTH ASC;
--TASK4
SELECT 
    YEAR(HIRE_DATE) AS YEAR, 
    MONTH(HIRE_DATE) AS MONTH, 
    COUNT(*) AS EMPLOYEE_COUNT 
FROM EMPLOYEE
GROUP BY YEAR(HIRE_DATE), MONTH(HIRE_DATE) 
ORDER BY YEAR ASC, MONTH ASC;
--TASK5
SELECT DEPARTMENT_ID, COUNT(*) AS EMPLOYEE_COUNT 
FROM EMPLOYEE
GROUP BY DEPARTMENT_ID 
HAVING COUNT(*) >= 4;
--TASK6
SELECT COUNT(*) AS FEB_EMPLOYEES 
FROM EMPLOYEE
WHERE MONTH(HIRE_DATE) = 2;
--TASK7
SELECT COUNT(*) AS EMPLOYEES_MAY_JUNE
FROM EMPLOYEE
WHERE MONTH(HIRE_DATE) IN (5, 6);
--TASK8
SELECT COUNT(*) AS EMPLOYEES_1985
FROM EMPLOYEE
WHERE YEAR(HIRE_DATE) = 1985;
--TASK9
SELECT 
    MONTH(HIRE_DATE) AS MONTH, 
    COUNT(*) AS EMPLOYEE_COUNT
FROM EMPLOYEE
WHERE YEAR(HIRE_DATE) = 1985
GROUP BY MONTH(HIRE_DATE)
ORDER BY MONTH(HIRE_DATE);
--TASK10
SELECT COUNT(*) AS EMPLOYEES_APRIL_1985
FROM EMPLOYEE
WHERE YEAR(HIRE_DATE) = 1985 AND MONTH(HIRE_DATE) = 4;
--TASK11
SELECT 
    DEPARTMENT_ID, 
    COUNT(*) AS EMPLOYEE_COUNT
FROM EMPLOYEE
WHERE YEAR(HIRE_DATE) = 1985 AND MONTH(HIRE_DATE) = 4
GROUP BY DEPARTMENT_ID
HAVING COUNT(*) >= 3;
--JOINS
--TASK1
SELECT E.EMPLOYEE_ID, E.FIRST_NAME, E.LAST_NAME, D.NAME 
FROM EMPLOYEE E 
JOIN DEPARTMENT D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;
--TASK2
SELECT E.EMPLOYEE_ID, E.FIRST_NAME, E.LAST_NAME, J.DESIGNATION
FROM EMPLOYEE E 
JOIN JOB J ON E.JOB_ID = J.JOB_ID;
--TASK3
SELECT E.FIRST_NAME, E.LAST_NAME, D.NAME, L.CITY 
FROM EMPLOYEE E 
JOIN DEPARTMENT D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
JOIN LOCATION L ON D.LOCATION_ID = L.LOCATION_ID;
--TASK4
SELECT 
    D.NAME, 
    COUNT(E.EMPLOYEE_ID) AS EMPLOYEE_COUNT
FROM EMPLOYEE E
JOIN DEPARTMENT D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
GROUP BY D.NAME
ORDER BY D.NAME ASC;
--TASK5
SELECT COUNT(E.EMPLOYEE_ID) AS EMPLOYEE_COUNT
FROM EMPLOYEE E
JOIN DEPARTMENT D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE D.NAME = 'SALES';
--TASK6
SELECT 
    D.NAME, 
    COUNT(E.EMPLOYEE_ID) AS EMPLOYEE_COUNT
FROM EMPLOYEE E
JOIN DEPARTMENT D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
GROUP BY D.NAME
HAVING COUNT(E.EMPLOYEE_ID) >= 3
ORDER BY D.NAME ASC;
--TASK7
SELECT COUNT(E.EMPLOYEE_ID) AS EMPLOYEE_COUNT
FROM EMPLOYEE E
JOIN DEPARTMENT D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
JOIN LOCATION L ON D.LOCATION_ID = L.LOCATION_ID
WHERE L.CITY = 'DALLAS';
--TASK8
SELECT E.EMPLOYEE_ID, E.FIRST_NAME, E.LAST_NAME, D.NAME
FROM EMPLOYEE E
JOIN DEPARTMENT D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE D.NAME IN ('SALES', 'OPERATIONS');
--CONDITIONAL STATEMENT
SELECT 
    EMPLOYEE_ID, 
    FIRST_NAME, 
    LAST_NAME, 
    SALARY,
    CASE 
        WHEN SALARY >= 10000 THEN 'A'
        WHEN SALARY >= 8000 THEN 'B'
        WHEN SALARY >= 6000 THEN 'C'
        WHEN SALARY >= 4000 THEN 'D'
        ELSE 'E'
    END AS SALARY_GRADE
FROM EMPLOYEE;
--TASK2
SELECT 
    CASE 
        WHEN SALARY >= 10000 THEN 'A'
        WHEN SALARY >= 8000 THEN 'B'
        WHEN SALARY >= 6000 THEN 'C'
        WHEN SALARY >= 4000 THEN 'D'
        ELSE 'E'
    END AS SALARY_GRADE,
    COUNT(*) AS EMPLOYEE_COUNT
FROM EMPLOYEE
GROUP BY 
    CASE 
        WHEN SALARY >= 10000 THEN 'A'
        WHEN SALARY >= 8000 THEN 'B'
        WHEN SALARY >= 6000 THEN 'C'
        WHEN SALARY >= 4000 THEN 'D'
        ELSE 'E'
    END
ORDER BY SALARY_GRADE;
--TASK3
SELECT 
    CASE 
        WHEN SALARY >= 4000 THEN 'D'
        WHEN SALARY >= 3000 THEN 'E'
        ELSE 'F'
    END AS SALARY_GRADE,
    COUNT(*) AS EMPLOYEE_COUNT
FROM EMPLOYEE
WHERE SALARY BETWEEN 2000 AND 5000
GROUP BY 
    CASE 
        WHEN SALARY >= 4000 THEN 'D'
        WHEN SALARY >= 3000 THEN 'E'
        ELSE 'F'
    END
ORDER BY SALARY_GRADE;
--SUB QUERIES
--TASK1
SELECT * 
FROM EMPLOYEE
WHERE SALARY = (SELECT MAX(SALARY) FROM EMPLOYEE);
--TASK2
SELECT E.* 
FROM EMPLOYEE E
JOIN DEPARTMENT D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE D.NAME = 'SALES';
--TASK3
SELECT * 
FROM EMPLOYEE AS E
JOIN JOB ON E.JOB_ID = JOB.Job_ID
WHERE Designation= 'Clerk';
--TASK4
SELECT E.* 
FROM EMPLOYEE E
JOIN DEPARTMENT D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
JOIN LOCATION L ON D.LOCATION_ID = L.LOCATION_ID
WHERE L.CITY = 'BOSTON';
--TASK5
SELECT COUNT(*) AS EMPLOYEE_COUNT
FROM EMPLOYEE E
JOIN DEPARTMENT D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE D.NAME = 'SALES';
--TASK6
UPDATE EMPLOYEE
SET SALARY = SALARY + (SALARY * 1.10)
WHERE JOB_ID IN (
    SELECT JOB_ID
    FROM JOB
    WHERE Designation = 'CLERK'
);

--TASK7
SELECT *
FROM EMPLOYEE
WHERE SALARY = (SELECT MAX(SALARY) FROM EMPLOYEE WHERE SALARY < (SELECT MAX(SALARY) FROM EMPLOYEE));
--TASK8
SELECT *
FROM EMPLOYEE
WHERE SALARY > ALL (SELECT SALARY FROM EMPLOYEE WHERE DEPARTMENT_ID = 30);
--TASK9
SELECT D.NAME
FROM DEPARTMENT D
LEFT JOIN EMPLOYEE E ON D.DEPARTMENT_ID = E.DEPARTMENT_ID
WHERE E.EMPLOYEE_ID IS NULL;
--TASK 10
SELECT E.*
FROM EMPLOYEE E
JOIN (
    SELECT DEPARTMENT_ID, AVG(SALARY) AS AVG_SALARY
    FROM EMPLOYEE
    GROUP BY DEPARTMENT_ID
) DAVG ON E.DEPARTMENT_ID = DAVG.DEPARTMENT_ID
WHERE E.SALARY > DAVG.AVG_SALARY;





















